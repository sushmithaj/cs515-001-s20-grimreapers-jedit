/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 11 17:42:14 GMT 2020
 */

package org.gjt.sp.jedit.buffer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.Vector;
import java.util.regex.Pattern;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.Segment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gjt.sp.jedit.Mode;
import org.gjt.sp.jedit.buffer.BufferListener;
import org.gjt.sp.jedit.buffer.DummyFoldHandler;
import org.gjt.sp.jedit.buffer.FoldHandler;
import org.gjt.sp.jedit.buffer.JEditBuffer;
import org.gjt.sp.jedit.indent.CloseBracketIndentRule;
import org.gjt.sp.jedit.indent.DeepIndentRule;
import org.gjt.sp.jedit.indent.IndentAction;
import org.gjt.sp.jedit.indent.RegexpIndentRule;
import org.gjt.sp.jedit.indent.WhitespaceRule;
import org.gjt.sp.jedit.syntax.DefaultTokenHandler;
import org.gjt.sp.jedit.syntax.DummyTokenHandler;
import org.gjt.sp.jedit.syntax.ParserRuleSet;
import org.gjt.sp.jedit.syntax.TokenHandler;
import org.gjt.sp.jedit.syntax.TokenMarker;
import org.gjt.sp.jedit.textarea.ColumnBlock;
import org.gjt.sp.jedit.textarea.ColumnBlockLine;
import org.gjt.sp.jedit.textarea.ElasticTabStopBufferListener;
import org.gjt.sp.jedit.textarea.Node;
import org.gjt.sp.jedit.textarea.TextArea;
import org.gjt.sp.util.IntegerArray;
import org.gjt.sp.util.Log;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JEditBuffer_ESTest extends JEditBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
public void testjoineLineAt()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.joinLineAt(930);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getFoldAtLine(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Hashtable<RegexpIndentRule, IndentAction.AlignOffset> hashtable0 = new Hashtable<RegexpIndentRule, IndentAction.AlignOffset>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      // Undeclared exception!
      try { 
        jEditBuffer0.createPosition(44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      DummyTokenHandler dummyTokenHandler0 = new DummyTokenHandler();
      // Undeclared exception!
      try { 
        jEditBuffer0.markTokens((-644), dummyTokenHandler0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.indentLines((-1458), (-1458));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getSegment(0, (-1882));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0:-1882
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<IndentAction.NoIncrease, Double> hashMap0 = new HashMap<IndentAction.NoIncrease, Double>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      // Undeclared exception!
      try { 
        jEditBuffer0.getSegment(9, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9:9
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getText((-849), (-849));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -849:-849
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Hashtable<Integer, JEditBuffer.PropValue> hashtable0 = new Hashtable<Integer, JEditBuffer.PropValue>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      DeepIndentRule deepIndentRule0 = new DeepIndentRule('W', 'W');
      ArrayList<IndentAction> arrayList0 = new ArrayList<IndentAction>();
      // Undeclared exception!
      try { 
        deepIndentRule0.apply(jEditBuffer0, 1162, 1, 0, arrayList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CloseBracketIndentRule closeBracketIndentRule0 = new CloseBracketIndentRule('w', false);
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      Vector<IndentAction> vector0 = new Vector<IndentAction>();
      // Undeclared exception!
      try { 
        closeBracketIndentRule0.apply(jEditBuffer0, 105, (-15), 1, vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getLineEndOffset(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Hashtable<DeepIndentRule, WhitespaceRule> hashtable0 = new Hashtable<DeepIndentRule, WhitespaceRule>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      ColumnBlock columnBlock0 = new ColumnBlock(jEditBuffer0, 1, (-2965));
      jEditBuffer0.updateColumnBlocks(0, 0, 0, columnBlock0);
      assertEquals(0, columnBlock0.getStart());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.remove(1, 0);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      Segment segment0 = new Segment();
      DefaultTokenHandler defaultTokenHandler0 = new DefaultTokenHandler();
      TokenMarker.LineContext tokenMarker_LineContext0 = jEditBuffer0.markTokens(segment0, (TokenMarker.LineContext) null, (TokenHandler) defaultTokenHandler0);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertNotNull(tokenMarker_LineContext0);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.isFoldStart(0);
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.insert(0, "Mode must be non-null");
      jEditBuffer0.getVirtualWidth(0, 3);
      assertTrue(jEditBuffer0.isDirty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.getText(0, 0);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.getSegment(0, 0);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      ParserRuleSet parserRuleSet0 = jEditBuffer0.getRuleSetAtOffset(0);
      assertEquals((-1), parserRuleSet0.getTerminateChar());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<ColumnBlock, Double> hashMap0 = new HashMap<ColumnBlock, Double>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      char[] charArray0 = new char[2];
      Segment segment0 = new Segment(charArray0, 1, 2227);
      jEditBuffer0.getLineText(0, 0, segment0);
      assertEquals(0, segment0.offset);
      assertEquals(0, segment0.count);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      int int0 = jEditBuffer0.getLineStartOffset(0);
      assertEquals(0, int0);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      int int0 = jEditBuffer0.getLineLength(0);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertEquals(0, int0);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.getLineEndOffset(0);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.getLineContext(0);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.writeLock();
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.setProperty("{XxAU4d#", "{XxAU4d#");
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.readLock();
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Hashtable<IndentAction.Collapse, Double> hashtable0 = new Hashtable<IndentAction.Collapse, Double>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      char[] charArray0 = new char[2];
      Segment segment0 = new Segment(charArray0, 1, (-834));
      IntegerArray integerArray0 = new IntegerArray();
      jEditBuffer0.loadText(segment0, integerArray0);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.isUndoInProgress();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Short, IndentAction.Reset> hashMap0 = new HashMap<Short, IndentAction.Reset>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      boolean boolean0 = jEditBuffer0.isPerformingIO();
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.isLoading();
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      boolean boolean0 = jEditBuffer0.isEditable();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.insideCompoundEdit();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      char[] charArray0 = new char[3];
      Segment segment0 = new Segment(charArray0, 0, 0);
      int int0 = jEditBuffer0.getTabStopPosition(segment0);
      assertEquals((-5), int0);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      int int0 = jEditBuffer0.getTabSize();
      assertTrue(jEditBuffer0.isEditable());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      WhitespaceRule whitespaceRule0 = new WhitespaceRule();
      jEditBuffer0.getProperty(whitespaceRule0);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      int int0 = jEditBuffer0.getLineOfOffset(0);
      assertTrue(jEditBuffer0.isEditable());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.getLineCount();
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Short, IndentAction.Reset> hashMap0 = new HashMap<Short, IndentAction.Reset>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      jEditBuffer0.getLength();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      int int0 = jEditBuffer0.getIndentSize();
      assertTrue(jEditBuffer0.isEditable());
      assertEquals(8, int0);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.getDefaultProperty("");
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      boolean boolean0 = jEditBuffer0.getBooleanProperty("t?n", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      boolean boolean0 = jEditBuffer0.getBooleanProperty("[33_On)5LF]*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.fireTransactionComplete();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hashtable<DeepIndentRule, WhitespaceRule> hashtable0 = new Hashtable<DeepIndentRule, WhitespaceRule>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      jEditBuffer0.firePreContentRemoved((-1), (-6), (-6), (-1));
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Hashtable<DeepIndentRule, WhitespaceRule> hashtable0 = new Hashtable<DeepIndentRule, WhitespaceRule>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      jEditBuffer0.firePreContentInserted((-2965), (-900), (-6), 4297);
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Pattern, IndentAction.Increase> hashMap0 = new HashMap<Pattern, IndentAction.Increase>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      jEditBuffer0.fireFoldHandlerChanged();
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Hashtable<IndentAction.Collapse, DummyFoldHandler> hashtable0 = new Hashtable<IndentAction.Collapse, DummyFoldHandler>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      jEditBuffer0.fireContentRemoved((-58), 1, 1219, (-58));
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Hashtable<Double, DummyFoldHandler> hashtable0 = new Hashtable<Double, DummyFoldHandler>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      jEditBuffer0.fireContentInserted(209, (-3178), (-2165), 209);
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.endCompoundEdit();
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<IndentAction.Reset, IndentAction.AlignParameter> hashMap0 = new HashMap<IndentAction.Reset, IndentAction.AlignParameter>(0);
      Hashtable<IndentAction.Reset, IndentAction.AlignParameter> hashtable0 = new Hashtable<IndentAction.Reset, IndentAction.AlignParameter>(hashMap0);
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      jEditBuffer0.beginCompoundEdit();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DummyFoldHandler dummyFoldHandler0 = new DummyFoldHandler();
      JEditBuffer.PropValue jEditBuffer_PropValue0 = new JEditBuffer.PropValue(dummyFoldHandler0, true);
      String string0 = jEditBuffer_PropValue0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.unsetProperty("<K>/ /c[j/!M>.=H");
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.setUndoLimit(0);
      assertFalse(jEditBuffer0.isPerformingIO());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      TokenMarker tokenMarker0 = new TokenMarker();
      jEditBuffer0.setTokenMarker(tokenMarker0);
      assertFalse(jEditBuffer0.isUndoInProgress());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.setReadOnly(true);
      assertTrue(jEditBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Hashtable<Integer, JEditBuffer.PropValue> hashtable0 = new Hashtable<Integer, JEditBuffer.PropValue>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      jEditBuffer0.setStringProperty("", (String) null);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.setPerformingIO(true);
      assertTrue(jEditBuffer0.isPerformingIO());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.setLoading(false);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.setIntegerProperty("@c2GM:SPKz*| )jVz", 0);
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.setFileReadOnly(true);
      assertTrue(jEditBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.setEditable(true);
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      IndentAction.Increase indentAction_Increase0 = new IndentAction.Increase(0);
      jEditBuffer0.setDefaultProperty("'this' reference to Bsh object: ", indentAction_Increase0);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.setContextInsensitive(false);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertFalse(jEditBuffer0.isContextInsensitive());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.setBooleanProperty("encoding", true);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.resetCachedProperties();
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      int[] intArray0 = new int[2];
      jEditBuffer0.removeTrailingWhiteSpace(intArray0);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Hashtable<IndentAction.Collapse, DummyFoldHandler> hashtable0 = new Hashtable<IndentAction.Collapse, DummyFoldHandler>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      jEditBuffer0.removeBufferListener((BufferListener) null);
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<JEditBuffer.PropValue, Integer> hashMap0 = new HashMap<JEditBuffer.PropValue, Integer>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      jEditBuffer0.parseBufferLocalProperties();
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.insert(0, "Mode must be non-null");
      jEditBuffer0.getKeywordMapAtOffset(0);
      jEditBuffer0.getContextSensitiveProperty(12, "Mode must be non-null");
      assertTrue(jEditBuffer0.isDirty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<ColumnBlock, Double> hashMap0 = new HashMap<ColumnBlock, Double>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      jEditBuffer0.joinLineAt(0);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.setDirty(false);
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.isDirty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      boolean boolean0 = jEditBuffer0.isTransactionInProgress();
      assertFalse(boolean0);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      boolean boolean0 = jEditBuffer0.isReadOnly();
      assertFalse(boolean0);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<RegexpIndentRule, IndentAction.Collapse> hashMap0 = new HashMap<RegexpIndentRule, IndentAction.Collapse>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      boolean boolean0 = jEditBuffer0.isFoldEnd(0);
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(boolean0);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      boolean boolean0 = jEditBuffer0.isFileReadOnly();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<ColumnBlock, Double> hashMap0 = new HashMap<ColumnBlock, Double>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      jEditBuffer0.isDirty();
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Object, JEditBuffer.PropValue> hashMap0 = new HashMap<Object, JEditBuffer.PropValue>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      jEditBuffer0.isContextInsensitive();
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.invalidateFoldLevels();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.invalidateCachedFoldLevels();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      Segment segment0 = new Segment();
      jEditBuffer0.insert(0, segment0);
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertFalse(jEditBuffer0.isDirty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.insert((-2105), (CharSequence) null);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.indentLines(0, (-2257));
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.getUndoId();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<ColumnBlock, Double> hashMap0 = new HashMap<ColumnBlock, Double>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      jEditBuffer0.getTokenMarker();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      int[] intArray0 = new int[4];
      jEditBuffer0.shiftIndentRight(intArray0);
      assertTrue(jEditBuffer0.isDirty());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      String string0 = jEditBuffer0.getText();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.insert(0, "Mode must be non-null");
      jEditBuffer0.indentUsingElasticTabstops();
      assertTrue(jEditBuffer0.isDirty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      String string0 = jEditBuffer0.getStringProperty("jEdit ");
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Hashtable<Double, DummyFoldHandler> hashtable0 = new Hashtable<Double, DummyFoldHandler>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      int int0 = jEditBuffer0.getIntegerProperty((String) null, 0);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      Pattern pattern0 = jEditBuffer0.getPatternProperty("", 2986);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertNull(pattern0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Hashtable<Double, DummyFoldHandler> hashtable0 = new Hashtable<Double, DummyFoldHandler>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      jEditBuffer0.getMode();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Hashtable<Short, JEditBuffer.Listener> hashtable0 = new Hashtable<Short, JEditBuffer.Listener>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      int int0 = jEditBuffer0.getIntegerProperty("lineSeparator", 1);
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      FoldHandler foldHandler0 = jEditBuffer0.getFoldHandler();
      assertNotNull(foldHandler0);
      
      jEditBuffer0.setFoldHandler(foldHandler0);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<IndentAction.Increase, Object> hashMap0 = new HashMap<IndentAction.Increase, Object>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      int[] intArray0 = jEditBuffer0.getFoldAtLine(0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.insert(0, "Mode must be non-null");
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        jEditBuffer0.indentLines(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      ColumnBlock columnBlock0 = jEditBuffer0.getColumnBlock();
      assertNull(columnBlock0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.getBufferListeners();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.fireFoldLevelChanged((-1138), 2264);
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Hashtable<ColumnBlock, IndentAction.Decrease> hashtable0 = new Hashtable<ColumnBlock, IndentAction.Decrease>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      jEditBuffer0.fireEndUndo();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.fireBufferLoaded();
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.fireBeginUndo();
      assertFalse(jEditBuffer0.isLoading());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.fireBeginRedo();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Hashtable<Double, Long> hashtable0 = new Hashtable<Double, Long>(hashMap0);
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      jEditBuffer0.canUndo();
      assertFalse(jEditBuffer0.elasticTabstopsOn);
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      jEditBuffer0.canRedo();
      assertTrue(jEditBuffer0.isEditable());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      ElasticTabStopBufferListener elasticTabStopBufferListener0 = new ElasticTabStopBufferListener((TextArea) null);
      jEditBuffer0.addBufferListener((BufferListener) elasticTabStopBufferListener0, 528);
      // Undeclared exception!
      try { 
        jEditBuffer0.removeTrailingWhiteSpace((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Short, IndentAction.Reset> hashMap0 = new HashMap<Short, IndentAction.Reset>();
      Short short0 = new Short((short) (-2037));
      IndentAction.Reset indentAction_Reset0 = new IndentAction.Reset();
      hashMap0.put(short0, indentAction_Reset0);
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      assertTrue(jEditBuffer0.isEditable());
      assertFalse(jEditBuffer0.elasticTabstopsOn);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.writeUnlock();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.locks.ReentrantReadWriteLock$Sync", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.updateColumnBlocks((-807), (-514), (-493), (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Hashtable<DeepIndentRule, WhitespaceRule> hashtable0 = new Hashtable<DeepIndentRule, WhitespaceRule>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      ColumnBlock columnBlock0 = new ColumnBlock(jEditBuffer0, 1, (-2965));
      // Undeclared exception!
      try { 
        jEditBuffer0.updateColumnBlocks(106, 106, 106, columnBlock0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.simpleIndentLine(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      int[] intArray0 = new int[4];
      intArray0[1] = 1;
      // Undeclared exception!
      try { 
        jEditBuffer0.shiftIndentRight(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.shiftIndentLeft((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      int[] intArray0 = new int[5];
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        jEditBuffer0.shiftIndentLeft(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<JEditBuffer.PropValue, Integer> hashMap0 = new HashMap<JEditBuffer.PropValue, Integer>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      // Undeclared exception!
      try { 
        jEditBuffer0.setMode((Mode) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Mode must be non-null
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      Mode mode0 = new Mode("H;AKK=a\"~g3*A]");
      // Undeclared exception!
      try { 
        jEditBuffer0.setMode(mode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.setMode((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Mode must be non-null
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<RegexpIndentRule, IndentAction.AlignOffset> hashMap0 = new HashMap<RegexpIndentRule, IndentAction.AlignOffset>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      // Undeclared exception!
      try { 
        jEditBuffer0.setMode("&qHG@x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Mode must be non-null
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.setDefaultProperty("", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer$PropValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        jEditBuffer0.removeTrailingWhiteSpace(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.remove(433, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 433:128
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.propertiesChanged();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.FoldHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Hashtable<IndentAction.Collapse, ColumnBlockLine> hashtable0 = new Hashtable<IndentAction.Collapse, ColumnBlockLine>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getCharacterElement(0);
      LabelView labelView0 = new LabelView(element0);
      Segment segment0 = labelView0.getText(1, 1);
      TokenMarker.LineContext tokenMarker_LineContext0 = new TokenMarker.LineContext();
      DefaultTokenHandler defaultTokenHandler0 = new DefaultTokenHandler();
      // Undeclared exception!
      try { 
        jEditBuffer0.markTokens(segment0, tokenMarker_LineContext0, (TokenHandler) defaultTokenHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      DummyTokenHandler dummyTokenHandler0 = DummyTokenHandler.INSTANCE;
      // Undeclared exception!
      try { 
        jEditBuffer0.markTokens(44, dummyTokenHandler0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.joinLineAt((-411));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.isFoldStart(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.isElectricKey(')', 65536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65536
         //
         verifyException("org.gjt.sp.jedit.buffer.LineManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.insertIndented(2179, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Hashtable<IndentAction.AlignParameter, String> hashtable0 = new Hashtable<IndentAction.AlignParameter, String>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      Log.init(true, 1);
      // Undeclared exception!
      try { 
        jEditBuffer0.insertAtColumn(389, 1496, (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      char[] charArray0 = new char[6];
      Segment segment0 = new Segment(charArray0, 0, (-1081));
      // Undeclared exception!
      try { 
        jEditBuffer0.insert(0, segment0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Hashtable<ColumnBlockLine, IndentAction.Collapse> hashtable0 = new Hashtable<ColumnBlockLine, IndentAction.Collapse>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      char[] charArray0 = new char[9];
      Segment segment0 = new Segment(charArray0, 442, 48);
      // Undeclared exception!
      try { 
        jEditBuffer0.insert((-4559), segment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Hashtable<Integer, JEditBuffer.PropValue> hashtable0 = new Hashtable<Integer, JEditBuffer.PropValue>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      // Undeclared exception!
      try { 
        jEditBuffer0.insert(1162, "tv8nq");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        jEditBuffer0.indentLines(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'w';
      // Undeclared exception!
      try { 
        jEditBuffer0.indentLines(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Hashtable<Integer, Float> hashtable0 = new Hashtable<Integer, Float>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      // Undeclared exception!
      try { 
        jEditBuffer0.indentLines(10, 1632);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getVirtualWidth((-1630), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Float, IndentAction.Reset> hashMap0 = new HashMap<Float, IndentAction.Reset>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        jEditBuffer0.getText(48, 48, segment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48:48
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getText(32, 1540);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32:1540
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Short, IndentAction.Reset> hashMap0 = new HashMap<Short, IndentAction.Reset>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      // Undeclared exception!
      try { 
        jEditBuffer0.getSegment((short) (-2037), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2037:32
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getRuleSetAtOffset(51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getPriorNonEmptyLine(105);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        jEditBuffer0.getOffsetOfVirtualColumn(100, 100, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Short, IndentAction.Reset> hashMap0 = new HashMap<Short, IndentAction.Reset>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      char[] charArray0 = new char[7];
      Segment segment0 = new Segment(charArray0, 658, (-442));
      // Undeclared exception!
      try { 
        jEditBuffer0.getLineText((-557), segment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      char[] charArray0 = new char[6];
      Segment segment0 = new Segment(charArray0, 1845, 1845);
      // Undeclared exception!
      try { 
        jEditBuffer0.getLineText((-4), 2813, segment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getLineText(4851);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getLineStartOffset(3323);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getLineSegment(49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getLineLength(3164);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<IndentAction.Reset, IndentAction.AlignParameter> hashMap0 = new HashMap<IndentAction.Reset, IndentAction.AlignParameter>(0);
      Hashtable<IndentAction.Reset, IndentAction.AlignParameter> hashtable0 = new Hashtable<IndentAction.Reset, IndentAction.AlignParameter>(hashMap0);
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      // Undeclared exception!
      try { 
        jEditBuffer0.getLineContext(264);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 264
         //
         verifyException("org.gjt.sp.jedit.buffer.LineManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Object, JEditBuffer.PropValue> hashMap0 = new HashMap<Object, JEditBuffer.PropValue>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      // Undeclared exception!
      try { 
        jEditBuffer0.getKeywordMapAtOffset(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getKeywordMapAtOffset((-763));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getIdealIndentForLine((-3028));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Hashtable<DummyFoldHandler, IndentAction.AlignParameter> hashtable0 = new Hashtable<DummyFoldHandler, IndentAction.AlignParameter>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashtable0);
      // Undeclared exception!
      try { 
        jEditBuffer0.getFoldLevel((-2828));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<IndentAction.Increase, DeepIndentRule> hashMap0 = new HashMap<IndentAction.Increase, DeepIndentRule>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        jEditBuffer0.getCurrentIndentForLine(80, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<ColumnBlock, Double> hashMap0 = new HashMap<ColumnBlock, Double>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      // Undeclared exception!
      try { 
        jEditBuffer0.getContextSensitiveProperty(0, "K]GJI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JEditBuffer jEditBuffer0 = new JEditBuffer();
      // Undeclared exception!
      try { 
        jEditBuffer0.getContextSensitiveProperty((-2414), (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<ColumnBlock, Double> hashMap0 = new HashMap<ColumnBlock, Double>();
      JEditBuffer jEditBuffer0 = new JEditBuffer(hashMap0);
      // Undeclared exception!
      try { 
        jEditBuffer0.createPosition((-226));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JEditBuffer jEditBuffer0 = null;
      try {
        jEditBuffer0 = new JEditBuffer((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<Short, JEditBuffer.PropValue> hashMap0 = new HashMap<Short, JEditBuffer.PropValue>();
      Short short0 = new Short((short)13);
      hashMap0.put(short0, (JEditBuffer.PropValue) null);
      JEditBuffer jEditBuffer0 = null;
      try {
        jEditBuffer0 = new JEditBuffer(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gjt.sp.jedit.buffer.JEditBuffer$PropValue", e);
      }
  }
}
